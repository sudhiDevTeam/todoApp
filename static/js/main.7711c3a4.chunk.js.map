{"version":3,"sources":["componets/TodoApp/TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["TodoApp","state","input","items","handleChange","event","setState","target","value","storeItems","preventDefault","deleteItem","key","filter","data","index","editData","console","log","this","className","onSubmit","type","onChange","placeholder","map","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gMAqDeA,G,kNAlDXC,MAAQ,CACJC,MAAO,GACPC,MAAO,I,EAEXC,aAAe,SAAAC,GACX,EAAKC,SAAS,CACVJ,MAAOG,EAAME,OAAOC,S,EAG5BC,WAAa,SAAAJ,GACTA,EAAMK,iBADY,IAEVR,EAAU,EAAKD,MAAfC,MACR,EAAKI,SAAS,CACVH,MAAM,GAAD,mBAAM,EAAKF,MAAME,OAAjB,CAAwBD,IAC7BA,MAAQ,M,EAGhBS,WAAa,SAAAC,GACT,EAAKN,SAAS,CACVH,MAAO,EAAKF,MAAME,MAAMU,QAAO,SAACC,EAAKC,GAAN,OAAgBA,IAASH,Q,EAGhEI,SAAW,SAACD,EAAMD,GACdG,QAAQC,IAAIH,EAAMD,I,uDAIZ,IAAD,SACoBK,KAAKlB,MAAtBC,EADH,EACGA,MAAOC,EADV,EACUA,MACf,OACI,yBAAKiB,UAAU,kBACX,0BAAMA,UAAU,eAAeC,SAAUF,KAAKV,YAC1C,yCACA,2BAAOa,KAAK,OAAOd,MAAON,EAAOqB,SAAUJ,KAAKf,aAAcoB,YAAY,sBAE9E,4BACKrB,EAAMsB,KACH,SAACX,EAAMC,GAAP,OACI,wBAAIH,IAAKG,EAAOW,QAAS,kBAAK,EAAKV,SAASD,EAAMD,KAAlD,IAA2DA,EAC3D,uBAAGM,UAAU,mBAAmBM,QAAS,kBAAK,EAAKf,WAAWI,gB,GAxCpEY,cCaPC,MAZf,WACE,OACE,yBAAMR,UAAU,OACX,kBAAC,EAAD,QCMWS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,a","file":"static/js/main.7711c3a4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport \"./custom.css\"\nclass TodoApp extends Component {\n    state = {\n        input: \"\",\n        items: []\n    }\n    handleChange = event => {\n        this.setState({\n            input: event.target.value\n        });\n    };\n    storeItems = event => {\n        event.preventDefault();\n        const { input } = this.state;\n        this.setState({\n            items: [...this.state.items, input],\n            input : \"\"\n        });\n    };\n    deleteItem = key => {\n        this.setState({\n            items: this.state.items.filter((data,index) => index !==key)\n        });\n    }\n    editData = (index,data) =>{\n        console.log(index,data);\n       \n    }\n\n    render() {\n        const { input, items } = this.state;\n        return (\n            <div className=\"todo-Container\">\n                <form className=\"input-values\" onSubmit={this.storeItems}>\n                    <h1>To do App</h1>\n                    <input type=\"text\" value={input} onChange={this.handleChange} placeholder=\"Enter the values\"></input>\n                </form>\n                <ul>\n                    {items.map(\n                        (data, index) => (\n                            <li key={index} onClick={()=> this.editData(index,data)}> {data} \n                            <i className=\"fas fa-trash-alt\" onClick={()=> this.deleteItem(index)}></i>\n                            </li>\n                        )\n                    )}\n\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default TodoApp;","import React from 'react';\nimport TodoApp from './componets/TodoApp/TodoApp';\n\nfunction App() {\n  return (\n    <div  className=\"App\">\n         <TodoApp>\n            \n         </TodoApp>\n         \n     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}